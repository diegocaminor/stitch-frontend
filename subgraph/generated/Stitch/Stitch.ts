// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DonateStreamer extends ethereum.Event {
  get params(): DonateStreamer__Params {
    return new DonateStreamer__Params(this);
  }
}

export class DonateStreamer__Params {
  _event: DonateStreamer;

  constructor(event: DonateStreamer) {
    this._event = event;
  }

  get streamer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewStreamer extends ethereum.Event {
  get params(): NewStreamer__Params {
    return new NewStreamer__Params(this);
  }
}

export class NewStreamer__Params {
  _event: NewStreamer;

  constructor(event: NewStreamer) {
    this._event = event;
  }

  get streamer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RunLottery extends ethereum.Event {
  get params(): RunLottery__Params {
    return new RunLottery__Params(this);
  }
}

export class RunLottery__Params {
  _event: RunLottery;

  constructor(event: RunLottery) {
    this._event = event;
  }

  get streamer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WithdrawEarnings extends ethereum.Event {
  get params(): WithdrawEarnings__Params {
    return new WithdrawEarnings__Params(this);
  }
}

export class WithdrawEarnings__Params {
  _event: WithdrawEarnings;

  constructor(event: WithdrawEarnings) {
    this._event = event;
  }

  get streamer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Stitch__profilesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getAddress(): Address {
    return this.value0;
  }

  getEarnings(): BigInt {
    return this.value1;
  }

  getPool(): BigInt {
    return this.value2;
  }

  getRegistered(): boolean {
    return this.value3;
  }
}

export class Stitch extends ethereum.SmartContract {
  static bind(address: Address): Stitch {
    return new Stitch("Stitch", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feePool(): BigInt {
    let result = super.call("feePool", "feePool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feePool", "feePool():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStreamerEarnings(_streamerAddress: Address): BigInt {
    let result = super.call(
      "getStreamerEarnings",
      "getStreamerEarnings(address):(uint256)",
      [ethereum.Value.fromAddress(_streamerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getStreamerEarnings(
    _streamerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStreamerEarnings",
      "getStreamerEarnings(address):(uint256)",
      [ethereum.Value.fromAddress(_streamerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStreamerPool(_streamerAddress: Address): BigInt {
    let result = super.call(
      "getStreamerPool",
      "getStreamerPool(address):(uint256)",
      [ethereum.Value.fromAddress(_streamerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getStreamerPool(_streamerAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStreamerPool",
      "getStreamerPool(address):(uint256)",
      [ethereum.Value.fromAddress(_streamerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStreamerRegistry(_streamerAddress: Address): boolean {
    let result = super.call(
      "getStreamerRegistry",
      "getStreamerRegistry(address):(bool)",
      [ethereum.Value.fromAddress(_streamerAddress)]
    );

    return result[0].toBoolean();
  }

  try_getStreamerRegistry(
    _streamerAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getStreamerRegistry",
      "getStreamerRegistry(address):(bool)",
      [ethereum.Value.fromAddress(_streamerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  profiles(param0: Address): Stitch__profilesResult {
    let result = super.call(
      "profiles",
      "profiles(address):(address,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Stitch__profilesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_profiles(param0: Address): ethereum.CallResult<Stitch__profilesResult> {
    let result = super.tryCall(
      "profiles",
      "profiles(address):(address,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Stitch__profilesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  winnerAddress(): Address {
    let result = super.call("winnerAddress", "winnerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_winnerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "winnerAddress",
      "winnerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ChangeFeeCall extends ethereum.Call {
  get inputs(): ChangeFeeCall__Inputs {
    return new ChangeFeeCall__Inputs(this);
  }

  get outputs(): ChangeFeeCall__Outputs {
    return new ChangeFeeCall__Outputs(this);
  }
}

export class ChangeFeeCall__Inputs {
  _call: ChangeFeeCall;

  constructor(call: ChangeFeeCall) {
    this._call = call;
  }

  get _newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeFeeCall__Outputs {
  _call: ChangeFeeCall;

  constructor(call: ChangeFeeCall) {
    this._call = call;
  }
}

export class DonateStreamerCall extends ethereum.Call {
  get inputs(): DonateStreamerCall__Inputs {
    return new DonateStreamerCall__Inputs(this);
  }

  get outputs(): DonateStreamerCall__Outputs {
    return new DonateStreamerCall__Outputs(this);
  }
}

export class DonateStreamerCall__Inputs {
  _call: DonateStreamerCall;

  constructor(call: DonateStreamerCall) {
    this._call = call;
  }

  get _streamerAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _donationAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DonateStreamerCall__Outputs {
  _call: DonateStreamerCall;

  constructor(call: DonateStreamerCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feePool(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _winnerAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class NewStreamerCall extends ethereum.Call {
  get inputs(): NewStreamerCall__Inputs {
    return new NewStreamerCall__Inputs(this);
  }

  get outputs(): NewStreamerCall__Outputs {
    return new NewStreamerCall__Outputs(this);
  }
}

export class NewStreamerCall__Inputs {
  _call: NewStreamerCall;

  constructor(call: NewStreamerCall) {
    this._call = call;
  }
}

export class NewStreamerCall__Outputs {
  _call: NewStreamerCall;

  constructor(call: NewStreamerCall) {
    this._call = call;
  }
}

export class RunLotteryCall extends ethereum.Call {
  get inputs(): RunLotteryCall__Inputs {
    return new RunLotteryCall__Inputs(this);
  }

  get outputs(): RunLotteryCall__Outputs {
    return new RunLotteryCall__Outputs(this);
  }
}

export class RunLotteryCall__Inputs {
  _call: RunLotteryCall;

  constructor(call: RunLotteryCall) {
    this._call = call;
  }
}

export class RunLotteryCall__Outputs {
  _call: RunLotteryCall;

  constructor(call: RunLotteryCall) {
    this._call = call;
  }
}

export class WithdrawEarningsCall extends ethereum.Call {
  get inputs(): WithdrawEarningsCall__Inputs {
    return new WithdrawEarningsCall__Inputs(this);
  }

  get outputs(): WithdrawEarningsCall__Outputs {
    return new WithdrawEarningsCall__Outputs(this);
  }
}

export class WithdrawEarningsCall__Inputs {
  _call: WithdrawEarningsCall;

  constructor(call: WithdrawEarningsCall) {
    this._call = call;
  }
}

export class WithdrawEarningsCall__Outputs {
  _call: WithdrawEarningsCall;

  constructor(call: WithdrawEarningsCall) {
    this._call = call;
  }
}
