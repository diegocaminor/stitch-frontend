// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DonateStreamer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonateStreamer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DonateStreamer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonateStreamer", id.toString(), this);
    }
  }

  static load(id: string): DonateStreamer | null {
    return changetype<DonateStreamer | null>(store.get("DonateStreamer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get streamer(): Bytes {
    let value = this.get("streamer");
    return value!.toBytes();
  }

  set streamer(value: Bytes) {
    this.set("streamer", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class NewStreamer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewStreamer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewStreamer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewStreamer", id.toString(), this);
    }
  }

  static load(id: string): NewStreamer | null {
    return changetype<NewStreamer | null>(store.get("NewStreamer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get streamer(): Bytes {
    let value = this.get("streamer");
    return value!.toBytes();
  }

  set streamer(value: Bytes) {
    this.set("streamer", Value.fromBytes(value));
  }
}

export class RunLottery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RunLottery entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RunLottery must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RunLottery", id.toString(), this);
    }
  }

  static load(id: string): RunLottery | null {
    return changetype<RunLottery | null>(store.get("RunLottery", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get streamer(): Bytes {
    let value = this.get("streamer");
    return value!.toBytes();
  }

  set streamer(value: Bytes) {
    this.set("streamer", Value.fromBytes(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    return value!.toBytes();
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }
}

export class WithdrawEarnings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawEarnings entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawEarnings must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawEarnings", id.toString(), this);
    }
  }

  static load(id: string): WithdrawEarnings | null {
    return changetype<WithdrawEarnings | null>(
      store.get("WithdrawEarnings", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get streamer(): Bytes {
    let value = this.get("streamer");
    return value!.toBytes();
  }

  set streamer(value: Bytes) {
    this.set("streamer", Value.fromBytes(value));
  }
}

export class Streamer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Streamer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Streamer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Streamer", id.toString(), this);
    }
  }

  static load(id: string): Streamer | null {
    return changetype<Streamer | null>(store.get("Streamer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get earnings(): BigInt {
    let value = this.get("earnings");
    return value!.toBigInt();
  }

  set earnings(value: BigInt) {
    this.set("earnings", Value.fromBigInt(value));
  }
}
